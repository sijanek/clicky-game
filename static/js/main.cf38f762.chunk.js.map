{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","bears","App","state","clickedArray","score","topScore","message","shakeit","shuffledArray","_this","shuffleArray","setState","includes","concat","bearsArray","i","length","j","Math","floor","random","_ref","console","log","_this2","this","components_Wrapper_Wrapper","map","bear","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"02BAgBeA,MAZf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOC,IAAKN,EAAMO,MAC3BC,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,UCJjCC,SAFC,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAiC,SAArBJ,EAAMY,aAAwB,eAAiB,WAAYZ,EAAMa,SC2E5FC,oNAtEbC,MAAQ,CACNF,QACAG,aAAc,GACdC,MAAO,EACPC,SAAU,EACVC,QAAS,GACTC,QAAS,WAEXX,aAAe,SAAAC,GACb,IAAMW,EAAgBC,EAAKC,aAAaD,EAAKP,MAAMF,OACnDS,EAAKE,SAAS,CAACX,MAAOQ,IAClBC,EAAKP,MAAMC,aAAaS,SAASf,GACnCY,EAAKE,SAAS,CAAEP,MAAO,EAAGD,aAAc,GAAIG,QAAQ,0CAA2CC,QAAS,SAGxGE,EAAKE,SAAS,CACZR,aAAcM,EAAKP,MAAMC,aAAaU,OAAO,CAAChB,IAC9CO,MAAOK,EAAKP,MAAME,MAAQ,EAC1BE,QAAS,4BACTC,QAAS,UAGTE,EAAKP,MAAME,MAAQK,EAAKP,MAAMG,UAChCI,EAAKE,SAAS,CAAEN,SAAUI,EAAKP,MAAME,WAGzCM,aAAe,SAACI,GACd,IAAK,IAAIC,EAAID,EAAWE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADIM,EAEb,CAACP,EAAWG,GAAIH,EAAWC,IAA3DD,EAAWC,GAFkCM,EAAA,GAE9BP,EAAWG,GAFmBI,EAAA,GAG9CC,QAAQC,IAAIT,EAAWC,IACvBO,QAAQC,IAAIT,EAAWG,IAE3B,OAAOH,2EAEG,IAAAU,EAAAC,KAEV,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,uBAEFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAY,SAAQH,EAAAC,EAAAC,cAAA,wBAAgBmC,KAAKvB,MAAME,MAA3B,gBAA+CqB,KAAKvB,MAAMG,WACjFjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,cAASmC,KAAKvB,MAAMI,WAE/ClB,EAAAC,EAAAC,cAACoC,EAAD,CACA3B,aAAgB0B,KAAKvB,MAAMK,QAC7BP,MACCyB,KAAKvB,MAAMF,MAAM2B,IAAI,SAAAC,GAAI,OAC1BxC,EAAAC,EAAAC,cAACuC,EAAD,CACAjC,aAAc4B,EAAK5B,aACnBC,GAAM+B,EAAK/B,GACXiC,IAAOF,EAAK/B,GACZH,MAASkC,EAAKlC,YAGbN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,8BA/DUwC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf38f762.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\"\r\n\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt=\"bear\" src={props.image}\r\n        onClick={() => props.clickPicture(props.id)} />\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.bears}</div>;\r\n\r\nexport default Wrapper;","import React, { Component } from \"react\";\nimport bears from \"./bears.json\";\nimport Card from \"./components/Card/Card.js\";\nimport Wrapper from \"./components/Wrapper/Wrapper.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    bears,\n    clickedArray: [],\n    score: 0,\n    topScore: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n  clickPicture = id => {\n    const shuffledArray = this.shuffleArray(this.state.bears);\n    this.setState({bears: shuffledArray});\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message:\"Incorrect guess!! Click for a new game!\", shakeit: \"true\"});\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Correct guess!! You rock!\",\n        shakeit: \"false\"\n      });\n    }\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score});\n    }\n  }\n  shuffleArray = (bearsArray) => {\n    for (let i = bearsArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [bearsArray[i], bearsArray[j]] = [bearsArray[j], bearsArray[i]];\n      console.log(bearsArray[i]);\n      console.log(bearsArray[j]);\n    }\n  return bearsArray;\n  }\n  render () {\n    //console.log(this.state.bears)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          \n          <h1 className=\"App-title\">Play Clicky Game!!</h1>\n        </header>\n        <h3 className=\"App-intro\">\n          <strong>Click on a card to earn points, but only click it once!</strong> \n          <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </h3>\n      <Wrapper\n      shakeWrapper = {this.state.shakeit}\n    bears =\n    {this.state.bears.map(bear => (\n    <Card \n    clickPicture={this.clickPicture}\n    id = {bear.id}\n    key = {bear.id} \n    image = {bear.image} />\n     ))}\n     />\n     <footer className=\"footer\">\n      <div className=\"container\">\n        <span className=\"text-muted\">Save Polar Bears</span>\n      </div>\n    </footer> \n\n    </div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}